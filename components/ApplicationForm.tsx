'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  Building2, 
  DollarSign, 
  User, 
  Phone, 
  Mail, 
  MapPin, 
  Calendar,
  Briefcase,
  TrendingUp,
  ArrowRight,
  ArrowLeft,
  CheckCircle
} from 'lucide-react'
import ProgressIndicator from './ProgressIndicator'

interface ApplicationFormProps {
  type: 'investor' | 'business'
}

const ApplicationForm = ({ type }: ApplicationFormProps) => {
  const [currentStep, setCurrentStep] = useState(1)
  const [formData, setFormData] = useState({
    // Step 1: Business Type
    businessType: '',
    businessCategory: '',
    
    // Step 2: Amount
    amount: '',
    purpose: '',
    
    // Step 3: Personal Info
    firstName: '',
    lastName: '',
    phone: '',
    email: '',
    
    // Step 4: Address
    address: '',
    city: '',
    
    // Step 5: Income
    monthlyIncome: '',
    businessIncome: '',
    
    // Step 6: Documents
    hasDocuments: false,
    agreeTerms: false
  })

  const steps = [
    '–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞',
    '–°—É–º–º–∞',
    '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
    '–ê–¥—Ä–µ—Å',
    '–î–æ—Ö–æ–¥—ã',
    '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ'
  ]

  const businessTypes = [
    { id: 'retail', name: '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è', icon: 'üè™' },
    { id: 'manufacturing', name: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', icon: 'üè≠' },
    { id: 'services', name: '–£—Å–ª—É–≥–∏', icon: 'üîß' },
    { id: 'construction', name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', icon: 'üèóÔ∏è' },
    { id: 'agriculture', name: '–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ', icon: 'üåæ' },
    { id: 'other', name: '–î—Ä—É–≥–æ–µ', icon: 'üíº' }
  ]

  const businessCategories = [
    { id: 'startup', name: '–°—Ç–∞—Ä—Ç–∞–ø', icon: 'üöÄ' },
    { id: 'small', name: '–ú–∞–ª—ã–π –±–∏–∑–Ω–µ—Å', icon: 'üè¢' },
    { id: 'medium', name: '–°—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å', icon: 'üè¨' },
    { id: 'large', name: '–ö—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å', icon: 'üè≠' }
  ]

  const handleInputChange = (field: string, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const nextStep = () => {
    if (currentStep < steps.length) {
      setCurrentStep(currentStep + 1)
    }
  }

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleSubmit = () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log('Form submitted:', formData)
    alert('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.')
  }

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">
                –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞? ‚ú®
              </h2>
              <p className="text-gray-600">
                –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
              </p>
            </div>

            <div className="grid grid-cols-2 gap-4 mb-8">
              {businessTypes.map((type) => (
                <button
                  key={type.id}
                  onClick={() => handleInputChange('businessType', type.id)}
                  className={`p-4 rounded-xl border-2 transition-all ${
                    formData.businessType === type.id
                      ? 'border-primary-500 bg-primary-50'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="text-2xl mb-2">{type.icon}</div>
                  <div className="text-sm font-medium text-gray-900">{type.name}</div>
                </button>
              ))}
            </div>

            <div className="text-center">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?
              </h3>
              <div className="grid grid-cols-2 gap-4">
                {businessCategories.map((category) => (
                  <button
                    key={category.id}
                    onClick={() => handleInputChange('businessCategory', category.id)}
                    className={`p-4 rounded-xl border-2 transition-all ${
                      formData.businessCategory === category.id
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <div className="text-2xl mb-2">{category.icon}</div>
                    <div className="text-sm font-medium text-gray-900">{category.name}</div>
                  </button>
                ))}
              </div>
            </div>
          </div>
        )

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">
                –ö–∞–∫–∞—è —Å—É–º–º–∞ –≤–∞–º –Ω—É–∂–Ω–∞? üí∞
              </h2>
              <p className="text-gray-600">
                –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
              </p>
            </div>

            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –°—É–º–º–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–º)
                </label>
                <input
                  type="number"
                  value={formData.amount}
                  onChange={(e) => handleInputChange('amount', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¶–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
                </label>
                <select
                  value={formData.purpose}
                  onChange={(e) => handleInputChange('purpose', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å</option>
                  <option value="equipment">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</option>
                  <option value="inventory">–¢–æ–≤–∞—Ä–Ω—ã–µ –∑–∞–ø–∞—Å—ã</option>
                  <option value="expansion">–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞</option>
                  <option value="working-capital">–û–±–æ—Ä–æ—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞</option>
                  <option value="real-estate">–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</option>
                  <option value="other">–î—Ä—É–≥–æ–µ</option>
                </select>
              </div>
            </div>

            <div className="bg-blue-50 rounded-xl p-4">
              <p className="text-sm text-blue-800">
                üí° –ß–µ–º —Ç–æ—á–Ω–µ–µ –≤—ã —É–∫–∞–∂–µ—Ç–µ —Ü–µ–ª—å, —Ç–µ–º –ª—É—á—à–µ –º—ã —Å–º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —É—Å–ª–æ–≤–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
              </p>
            </div>
          </div>
        )

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">
                –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? ‚ú®
              </h2>
              <p className="text-gray-600">
                –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ
              </p>
            </div>

            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ò–º—è
                  </label>
                  <input
                    type="text"
                    value={formData.firstName}
                    onChange={(e) => handleInputChange('firstName', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    placeholder="–ò–º—è"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –§–∞–º–∏–ª–∏—è
                  </label>
                  <input
                    type="text"
                    value={formData.lastName}
                    onChange={(e) => handleInputChange('lastName', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    placeholder="–§–∞–º–∏–ª–∏—è"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¢–µ–ª–µ—Ñ–æ–Ω
                </label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  placeholder="+996 XXX XXX XXX"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Email
                </label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  placeholder="your@email.com"
                />
              </div>
            </div>

            <div className="bg-green-50 rounded-xl p-4">
              <p className="text-sm text-green-800">
                üí° –ú—ã –Ω–µ –¥–µ–ª–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ
              </p>
            </div>
          </div>
        )

      case 4:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">
                –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à –±–∏–∑–Ω–µ—Å? üè†
              </h2>
              <p className="text-gray-600">
                –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞
              </p>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ê–¥—Ä–µ—Å
                </label>
                <input
                  type="text"
                  value={formData.address}
                  onChange={(e) => handleInputChange('address', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  placeholder="–£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ì–æ—Ä–æ–¥
                </label>
                <select
                  value={formData.city}
                  onChange={(e) => handleInputChange('city', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>
                  <option value="bishkek">–ë–∏—à–∫–µ–∫</option>
                  <option value="osh">–û—à</option>
                  <option value="jalalabad">–î–∂–∞–ª–∞–ª-–ê–±–∞–¥</option>
                  <option value="karakol">–ö–∞—Ä–∞–∫–æ–ª</option>
                  <option value="tokmok">–¢–æ–∫–º–æ–∫</option>
                  <option value="other">–î—Ä—É–≥–æ–π</option>
                </select>
              </div>
            </div>

            <div className="text-center">
              <p className="text-sm text-gray-500">–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å!</p>
            </div>
          </div>
        )

      case 5:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">
                –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –¥–æ—Ö–æ–¥–∞—Ö üìà
              </h2>
              <p className="text-gray-600">
                –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à—É –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
              </p>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –±–∏–∑–Ω–µ—Å–∞ (—Å–æ–º)
                </label>
                <input
                  type="number"
                  value={formData.businessIncome}
                  onChange={(e) => handleInputChange('businessIncome', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –õ–∏—á–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (—Å–æ–º)
                </label>
                <input
                  type="number"
                  value={formData.monthlyIncome}
                  onChange={(e) => handleInputChange('monthlyIncome', e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                />
              </div>
            </div>

            <div className="bg-yellow-50 rounded-xl p-4">
              <p className="text-sm text-yellow-800">
                üí° –ú—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –≤—ã–ø–∏—Å–∫–∞–º–∏ –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
              </p>
            </div>
          </div>
        )

      case 6:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">
                –û—Ç–ª–∏—á–Ω–æ! üéâ
              </h2>
              <p className="text-gray-600">
                –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
              </p>
            </div>

            <div className="bg-green-50 rounded-xl p-6">
              <div className="flex items-center mb-4">
                <CheckCircle className="w-8 h-8 text-green-600 mr-3" />
                <h3 className="text-lg font-semibold text-green-800">
                  –ó–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
                </h3>
              </div>
              
              <div className="space-y-2 text-sm text-green-700">
                <p>‚Ä¢ –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</p>
                <p>‚Ä¢ –°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π</p>
                <p>‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                <p>‚Ä¢ –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —à–∞—Ä–∏–∞—Ç–∞</p>
              </div>
            </div>

            <div className="space-y-4">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={formData.hasDocuments}
                  onChange={(e) => handleInputChange('hasDocuments', e.target.checked)}
                  className="w-4 h-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500"
                />
                <span className="ml-2 text-sm text-gray-700">
                  –£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                </span>
              </label>

              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={formData.agreeTerms}
                  onChange={(e) => handleInputChange('agreeTerms', e.target.checked)}
                  className="w-4 h-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500"
                />
                <span className="ml-2 text-sm text-gray-700">
                  –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å <a href="/documents" className="text-primary-600 hover:underline">—É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</a>
                </span>
              </label>
            </div>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className="max-w-2xl mx-auto px-4 sm:px-0">
      {/* Progress Indicator */}
      <ProgressIndicator 
        currentStep={currentStep} 
        totalSteps={steps.length} 
        steps={steps} 
      />

      {/* Form Card */}
      <motion.div
        key={currentStep}
        initial={{ opacity: 0, x: 20 }}
        animate={{ opacity: 1, x: 0 }}
        exit={{ opacity: 0, x: -20 }}
        transition={{ duration: 0.3 }}
        className="bg-white rounded-2xl shadow-xl p-4 sm:p-6 lg:p-8"
      >
        {renderStep()}

        {/* Navigation */}
        <div className="flex justify-between mt-8">
          <button
            onClick={prevStep}
            disabled={currentStep === 1}
            className={`px-6 py-3 rounded-xl font-medium transition-colors ${
              currentStep === 1
                ? 'text-gray-400 cursor-not-allowed'
                : 'text-gray-700 hover:bg-gray-100'
            }`}
          >
            <ArrowLeft className="w-4 h-4 inline mr-2" />
            –ù–∞–∑–∞–¥
          </button>

          {currentStep < steps.length ? (
            <button
              onClick={nextStep}
              className="btn-primary inline-flex items-center"
            >
              –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
              <ArrowRight className="w-4 h-4 ml-2" />
            </button>
          ) : (
            <button
              onClick={handleSubmit}
              disabled={!formData.agreeTerms || !formData.hasDocuments}
              className={`px-6 py-3 rounded-xl font-medium transition-colors ${
                !formData.agreeTerms || !formData.hasDocuments
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-primary-600 hover:bg-primary-700 text-white'
              }`}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
            </button>
          )}
        </div>
      </motion.div>
    </div>
  )
}

export default ApplicationForm
